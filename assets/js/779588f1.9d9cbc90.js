"use strict";(self.webpackChunkuhe_docs=self.webpackChunkuhe_docs||[]).push([[468],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>v});var i=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,i,n=function(e,t){if(null==e)return{};var r,i,n={},o=Object.keys(e);for(i=0;i<o.length;i++)r=o[i],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)r=o[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=i.createContext({}),l=function(e){var t=i.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=l(e.components);return i.createElement(s.Provider,{value:t},e.children)},h="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),h=l(r),d=n,v=h["".concat(s,".").concat(d)]||h[d]||p[d]||o;return r?i.createElement(v,a(a({ref:t},u),{},{components:r})):i.createElement(v,a({ref:t},u))}));function v(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,a=new Array(o);a[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[h]="string"==typeof e?e:n,a[1]=c;for(var l=2;l<o;l++)a[l]=r[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,r)}d.displayName="MDXCreateElement"},35492:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var i=r(87462),n=(r(67294),r(3905));const o={slug:"architecture-overview",title:"Architecture Overview",sidebar_position:1},a="Architecture Overview",c={unversionedId:"Architecture/overview",id:"Architecture/overview",title:"Architecture Overview",description:"This section presents a brief overview of our architecture and design choices.",source:"@site/docs/Architecture/overview.md",sourceDirName:"Architecture",slug:"/Architecture/architecture-overview",permalink:"/uhi-documentation-site/docs/Architecture/architecture-overview",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Architecture/overview.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"architecture-overview",title:"Architecture Overview",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Unified Health Ecosystem",permalink:"/uhi-documentation-site/docs/intro"},next:{title:"API Integration with ABDM",permalink:"/uhi-documentation-site/docs/Architecture/abdm-api-integration-process"}},s={},l=[{value:"Technologies/Design Choices",id:"technologiesdesign-choices",level:2},{value:"Service architecture",id:"service-architecture",level:2}],u={toc:l};function h(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,i.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"architecture-overview"},"Architecture Overview"),(0,n.kt)("p",null,"This section presents a brief overview of our architecture and design choices."),(0,n.kt)("p",null,"The application consists of a frontend and a backend, along with a database. The backend of our application interacts with the ABDM components (like the Gateway, the Consent Manager and the like) through API calls on exposed endpoints."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Architecture Overview",src:r(95638).Z,width:"666",height:"561"})),(0,n.kt)("h2",{id:"technologiesdesign-choices"},"Technologies/Design Choices"),(0,n.kt)("p",null,"For the frontend, we have decided to go with the following tech stack:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Next.js/React"),(0,n.kt)("li",{parentName:"ul"},"Tailwind CSS")),(0,n.kt)("p",null,"For the backend, we have decided to go forward with the following tech stack:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Express, running on NodeJS")),(0,n.kt)("p",null,"We use a relational database (PostgreSQL) for storing relevant information."),(0,n.kt)("p",null,"The frontend and the backend are connected with a RESTful API.\nThe backend of our application further interacts with the APIs of ABDM to provide relevant functionalities."),(0,n.kt)("h2",{id:"service-architecture"},"Service architecture"),(0,n.kt)("p",null,"We have two services in our application:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("strong",{parentName:"li"},"Onboarding Service")," is responsible for handling the registration of users (patients)"),(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("strong",{parentName:"li"},"User Service")," is responsible for handling the user management of the application.\n",(0,n.kt)("img",{alt:"Service Architecture",src:r(30447).Z,width:"323",height:"442"}))))}h.isMDXComponent=!0},30447:(e,t,r)=>{r.d(t,{Z:()=>i});const i=r.p+"assets/images/service-architecture.drawio-6f81a4ee0438b1a9a1aa8ea84ae5f3f7.png"},95638:(e,t,r)=>{r.d(t,{Z:()=>i});const i=r.p+"assets/images/architecture_overview-fd755af58c9884f842b42ad1304ed805.svg"}}]);